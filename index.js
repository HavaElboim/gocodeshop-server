// import the express package, installed earlier using: npm install express
const express = require("express");
const path = require("path");

// call the express function which returns an express server application
const app = express();

app.use(express.json());

require("dotenv").config();

// Serve static files from the React app
app.use(express.static(path.join(__dirname, "client/build")));

// add mongoose to communicate with mongoDB
// - see https://mongoosejs.com/docs/index.html
const mongoose = require("mongoose");
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// I'm getting in Heroku the following error:
// Application error
// An error occurred in the application and your page could not be served. If you are the application owner, check your logs for details.
// (to see error log, in a cmd terminal, type:  heroku logs -a gocodeshop-hava )
// in log there is: connection error: MongooseServerSelectionError: connect ECONNREFUSED
// see here for ideas to solve error:
// https://stackoverflow.com/questions/49894913/error-at-connecting-to-mongodb-atlas-server
// :
// I also faced the similar issue while I was connecting MongoDB Compass to https://cloud.mongodb.com/ cluster.
//
// The following steps resolve the issue.
//
// 1. Visit google.com > Enter My IP Address > Copy the Public IP Address of your system/network
// 2. Go to https://cloud.mongodb.com/ Cluster > Select Security > Network Access > Click on IP whilelist Tab > Add IP Address > Enter your public IP address.
//
// tried all this but still get Application error in Heroku
//
// now read here: https://stackoverflow.com/questions/57371035/could-not-find-a-required-file-name-index-html
// Does your project have an index.html file in the public directory? If not you can get the one that Create React App uses here:
// https://github.com/facebook/create-react-app/blob/master/packages/cra-template/template/public/index.html
// so copied that file into the public directory in the project
//
// & retried
// but still get Application Error

var cors = require("cors");
app.use(cors());

const productSchema = new mongoose.Schema({
  //title: { type: String, required: true },
  title: String,
  description: String,
  price: Number,
  category: String,
  image: String,
});

const Product = mongoose.model("Product", productSchema);

// provide data to be displayed on the / page of the server's website
app.get("/api", (req, res) => {
  res.send("Hello world");
});

app.get("/api/products", async (req, res) => {
  console.log("search for all products");
  Product.find({})
    .then((products) => res.json(products))
    .catch((err) => res.status(404).json({ success: false }));
});

//adding option to serve requests with parameters:
app.get("/api/products/:_id", async (req, res) => {
  console.log("req.params are: ", req.params);
  console.log("received request for product id: ", req.params._id);

  const { id } = req.params._id; ///here we do destructuring - we take out the params called id from the params array

  Product.findById(req.params._id).exec(function (err, product) {
    if (err) {
      console.error("Error retrieving product by id!");
    } else {
      console.log("server product = " + JSON.stringify(product));
      res.json(product);
    }
  });
});

// post: to add an item to the database
// - must define Schema for documents (records) in the database
app.post("/api/products", async (req, res) => {
  // if have defined slug for each product, search by slug instead of by id:
  // app.get("products/:slug") etc

  // define "Product" as collection,
  // then Mongoose will go to "Products" (with `s` at the end)
  // during app.get later on in the code

  const { title, description, price, category, image } = req.body;

  console.log("adding product: ", title, description, price, category, image);

  const product = await new Product({
    title,
    description,
    price,
    category,
    image,
  }).save();
  console.log("POST!", product);

  //insertOne is in Mongo but not in Mongoose...
  //Product.insertOne({ title, description, price, category, url }).exec();

  res.send(product);
});

// put : to change a value of an item in the database
// define the put as an async function
app.put("/api/products/:_id", async (req, res) => {
  const { title, description, price, category, image } = req.body; // pass the new title in the body of the put request
  // const product = products.find((product) => product.id === +productId);
  // product.title = title; // here have changed the title of the product in the database
  //res.send("ok!");

  // identify the project by the id generated by the server, which has the
  // key _id
  // omitUndefined=true : If true, delete any properties whose value is undefined when casting an update.
  await Product.updateOne(
    { _id: req.params._id },
    { title, description, price, category, image },
    { omitUndefined: true }
  ).exec();

  res.send("OK!");
});

// delete: to delete an item in the db
// has to be async since need to first wait until db finished deleting record
// for async:
// 1. add async before (req, res)
// 2. add .exec() after the deleteOne
// 3. add await before the deleteOne
app.delete("/api/products/:_id", async (req, res) => {
  console.log("id to delete: ", req.params._id);

  /*
  alternative version:

  const productIndex = products.findIndex(
    (product) => product.id === +productId
  );
 */
  await Product.deleteOne({ _id: req.params._id }).exec();

  res.send("ok!");
});

// The "catchall" handler: for any request that doesn't
// match one above, send back React's index.html file.
app.get("*", (req, res) => {
  res.sendFile(path.join(__dirname + "/client/build/index.html"));
});

const PORT = process.env.PORT || 5000;

//  listen for any requests that come in on port PORT (8000)

app.listen(PORT, () => {
  const db = mongoose.connection;
  db.on("error", console.error.bind(console, "connection error:"));
  db.once("open", function () {
    // we're connected!
  });
  //  res.setHeader("Access-Control-Allow-Origin", "http://localhost:8000");
  console.log(`CORS-enabled web server listening on port ${PORT}`);
});

// running ipconfig in terminal to find local IP address:
// gave:
// IPv4 Address. . . . . . . . . . . : 192.168.43.81

// installed express using: npm install express
// and called: npm init
// to create package.json file.

// created json  database of products for shop in: products.json

// run server using: node server.js

// access server's webpage by this address in the browser:
// http://192.168.43.81:8000/
// This shows "Hello world" on the webpage

// see the shuki page here:
// http://192.168.43.81:8000/shuki

/*
elad's example:

const express = require("express");
const bodyParser = require("body-parser");

const app = express();

app.use(bodyParser.json());

let todos = [
  { id: 1, title: "Wash the car" },
  { id: 2, title: "Throw the garbage" },
  { id: 3, title: "Wash the dishes" },
  { id: 4, title: "Empty the garbage" },
];

app.get("/todos", (req, res) => {
  const { q } = req.query;
  if (q) {
    res.send(todos.filter((todo) => todo.title.includes(q)));
  } else {
    res.send(todos);
  }
});

app.get("/todos/:todoId", (req, res) => {
  const { todoId } = req.params;
  const todo = todos.find((todo) => todo.id === +todoId);
  res.send(todo ?? {});
});

app.post("/todos", (req, res) => {
  const { title } = req.body;
  todos.push({ id: todos.length + 1, title });

  res.send("OK!");
});

app.put("/todos/:todoId", (req, res) => {
  const { todoId } = req.params;
  const { title } = req.body;
  const todo = todos.find((todo) => todo.id === +todoId);
  todo.title = title;

  res.send("OK!");
});

app.delete("/todos/:todoId", (req, res) => {
  const { todoId } = req.params;
  const todoIndex = todos.findIndex((todo) => todo.id === +todoId);
  todos.splice(todoIndex, 1);

  res.send("OK!");
});

app.listen(8000, () => {
  console.log("Example app listening on port 8000!");
});

*/
