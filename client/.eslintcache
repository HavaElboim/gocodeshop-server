[{"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\index.js":"1","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\reportWebVitals.js":"2","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\App.js":"3","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\contexts\\ThemeContexts.js":"4","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\pages\\Home\\Home.js":"5","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\pages\\ProductInfo\\ProductInfo.js":"6","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\pages\\About\\About.js":"7","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\pages\\Admin\\Admin.js":"8","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\Header\\Header.js":"9","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\Products\\Products.js":"10","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\CategorySelect\\CategorySelect.js":"11","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\SaleCountdown\\SaleCountdown.js":"12","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\ChangeThemeColors\\ChangeThemeColors.js":"13","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\SliderFilterPrice\\SliderFilterPrice.js":"14","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\SearchKeyword\\SearchKeyword.js":"15","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\ProductDisplayClass\\ProductDisplayClass.js":"16","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\ListCategories\\ListCategories.js":"17","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\contexts\\UserContexts.js":"18","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\DisplayUser\\DisplayUser.js":"19","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\ChangeUser\\ChangeUser.js":"20","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\CategorySelectAdmin\\CategorySelectAdmin.js":"21","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\storagetools\\LocalStorageArrayTools.js":"22","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\contexts\\SaleContexts.js":"23","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\CartIcon\\CartIcon.js":"24","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\CartDisplayContents\\CartDisplayContents.js":"25","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\CartItem\\CartItem.js":"26"},{"size":517,"mtime":1615478320063,"results":"27","hashOfConfig":"28"},{"size":375,"mtime":1615478320086,"results":"29","hashOfConfig":"28"},{"size":3791,"mtime":1617706506585,"results":"30","hashOfConfig":"28"},{"size":554,"mtime":1618129647254,"results":"31","hashOfConfig":"28"},{"size":2472,"mtime":1617277679097,"results":"32","hashOfConfig":"28"},{"size":17277,"mtime":1618149671142,"results":"33","hashOfConfig":"28"},{"size":293,"mtime":1615478320070,"results":"34","hashOfConfig":"28"},{"size":8144,"mtime":1617706539369,"results":"35","hashOfConfig":"28"},{"size":2788,"mtime":1618151294835,"results":"36","hashOfConfig":"28"},{"size":2340,"mtime":1617951023854,"results":"37","hashOfConfig":"28"},{"size":2077,"mtime":1617329803211,"results":"38","hashOfConfig":"28"},{"size":3658,"mtime":1615736895401,"results":"39","hashOfConfig":"28"},{"size":516,"mtime":1616570489303,"results":"40","hashOfConfig":"28"},{"size":1836,"mtime":1617690240139,"results":"41","hashOfConfig":"28"},{"size":1909,"mtime":1615736895401,"results":"42","hashOfConfig":"28"},{"size":3251,"mtime":1617951138631,"results":"43","hashOfConfig":"28"},{"size":1884,"mtime":1616570571661,"results":"44","hashOfConfig":"28"},{"size":339,"mtime":1615668286879,"results":"45","hashOfConfig":"28"},{"size":551,"mtime":1616538023272,"results":"46","hashOfConfig":"28"},{"size":641,"mtime":1616570475140,"results":"47","hashOfConfig":"28"},{"size":1763,"mtime":1615738668586,"results":"48","hashOfConfig":"28"},{"size":1112,"mtime":1615835500104,"results":"49","hashOfConfig":"28"},{"size":688,"mtime":1616579112900,"results":"50","hashOfConfig":"28"},{"size":1821,"mtime":1618139528550,"results":"51","hashOfConfig":"28"},{"size":968,"mtime":1618129864469,"results":"52","hashOfConfig":"28"},{"size":4758,"mtime":1618209267200,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"2lzu8r",{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"56"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"56"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"56"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"56"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"56"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"56"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"56"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118"},"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\index.js",[],["119","120"],"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\reportWebVitals.js",[],"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\App.js",[],"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\contexts\\ThemeContexts.js",[],"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\pages\\Home\\Home.js",["121","122","123","124"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport DisplayUser from \"../../components/DisplayUser/DisplayUser\";\r\nimport UserContext from \"../../contexts/UserContexts\";\r\nimport SaleContext, { sales } from \"../../contexts/SaleContexts\";\r\n\r\n//components of content:\r\nimport Header from \"../../components/Header/Header\";\r\nimport Products from \"../../components/Products/Products\";\r\n\r\nconst Home = () => {\r\n  const [secondsLeft, setSecondsLeft] = useState(65);\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n  const [products, setProducts] = useState([]);\r\n  const [isSale, setSale] = useState(\"true\");\r\n  const [priceRange, setPriceRange] = useState([0, 200]);\r\n  const [searchKeyword, setSearch] = useState(\"\");\r\n  const [numProducts, setNumProds] = useState(\"\");\r\n  const { user, toggleUser } = useContext(UserContext);\r\n\r\n  // fetching from my server on localhost at 192.168.43.81 on port 8000:\r\n  /*useEffect(() => {\r\n    fetch(\"http://192.168.43.81:8000/products.json\")\r\n      .then((result) => result.json())\r\n      .then((data) => {\r\n        setProducts(data);\r\n      });\r\n    console.log(\"fetched \");\r\n  }, []);\r\n  */\r\n  /* mongoose:\r\n fetch(\"http://10.0.0.193:8000/products\")\r\n */\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/products\")\r\n      .then((result) => result.json())\r\n      .then((data) => {\r\n        setProducts(data);\r\n      });\r\n    console.log(\"fetched products in Home\");\r\n    setNumProds(products.length);\r\n  }, [products.length]);\r\n\r\n  return (\r\n    <div>\r\n      <div>Num products in shop: {numProducts}</div>\r\n      {user.name === \"Admin\" && <div>Click on product to edit it</div>}\r\n      {user.name !== \"Admin\" && (\r\n        <div>Click on product to see details and order</div>\r\n      )}\r\n      <Header\r\n        selectedCategory={selectedCategory}\r\n        setSelectedCategory={setSelectedCategory}\r\n        secondsLeft={secondsLeft}\r\n        setSecondsLeft={setSecondsLeft}\r\n        products={products}\r\n        setProducts={setProducts}\r\n        isSale={isSale}\r\n        setSale={setSale}\r\n        priceRange={priceRange}\r\n        setPriceRange={setPriceRange}\r\n        searchKeyword={searchKeyword}\r\n        setSearch={setSearch}\r\n      ></Header>\r\n      <Products\r\n        secondsLeft={secondsLeft}\r\n        selectedCategory={selectedCategory}\r\n        products={products}\r\n        isSale={isSale}\r\n        priceRange={priceRange}\r\n      ></Products>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n\r\n/*\r\n */\r\n","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\pages\\ProductInfo\\ProductInfo.js",["125","126","127","128","129","130","131","132"],"import { React, useState, useEffect, useContext } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport \"./ProductInfo.css\";\r\nimport UserContext from \"../../contexts/UserContexts\";\r\nimport ThemeContext, { themes } from \"../../contexts/ThemeContexts\";\r\nimport SaleContext, { sales } from \"../../contexts/SaleContexts\";\r\n\r\nimport \"../../components/storagetools/LocalStorageArrayTools.js\";\r\nimport CategorySelectAdmin from \"../../components/CategorySelectAdmin/CategorySelectAdmin\";\r\n// import saleIcon from \"../../components/icons/sale-icon-png-19.png\";\r\nimport saleIcon from \"../../components/icons/saleGreenBig.png\";\r\nimport CartIcon from \"../../components/CartIcon/CartIcon\";\r\n\r\n/*\r\nmongodb+srv://test-user1:12345@cluster0.u00wy.mongodb.net/gocodeshop-hava?retryWrites=true&w=majority&tlsInsecure=true\r\n*/\r\n\r\n/* mongoDB version on localhost:\r\nuseEffect(() => {\r\n    fetch(`http://10.0.0.193:8000/products/${match.params.productid}`)\r\n      .then((response) => response.json())\r\n      .then((data) => setData(data));\r\n    console.log(\r\n      \"descr is \",\r\n      productData,\r\n      ` from http://10.0.0.193:8000/products/${match.params.productid}`\r\n    );\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  */\r\n\r\nconst ProductInfo = ({ match }) => {\r\n  const [products, setProducts] = useState({});\r\n  const { user, toggleUser } = useContext(UserContext);\r\n  const { theme } = useContext(ThemeContext);\r\n  const { sale } = useContext(SaleContext);\r\n  const [quantity, setQuantity] = useState(1);\r\n  const [editProduct, setEditProduct] = useState(false);\r\n  const [notAllFieldsFilled, setFieldsFilled] = useState(false);\r\n\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n  const [onSale, setSale] = useState(\"false\");\r\n  const [saleReductionPercent, setReduction] = useState(\"\");\r\n\r\n  const [productId, setId] = useState(\"\");\r\n  const [productName, setName] = useState(\"\");\r\n  const [productDescription, setDescription] = useState(\"\");\r\n  const [productURL, setURL] = useState(\"\");\r\n  const [productPrice, setPrice] = useState(\"\");\r\n  const [quantityInStock, setStockQuantity] = useState(\"\");\r\n\r\n  const [stopEditText, setStopEditText] = useState(\"Exit product update\");\r\n  const [quantityWarnText, setQtyWarn] = useState(\"\");\r\n\r\n  const deleteProductText = \"Delete product\";\r\n  console.log(\"in productinfo, theme is: \", theme.foreground);\r\n  //console.log(\"sale is\", sale.isSale);\r\n\r\n  useEffect(() => {\r\n    fetch(`/api/products/${match.params._id}`)\r\n      .then((response) => response.json())\r\n      .then((data) => setProducts(data));\r\n    console.log(\"descr is \", products, ` /api/products/${match.params._id}`);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  //const newPrice = +(productPrice * 0.9).toFixed(2);\r\n\r\n  const deleteProductFn = async (id) => {\r\n    console.log(`deleting product ${id}`);\r\n\r\n    if (window.confirm(\"Delete this product?\")) {\r\n      const res = await fetch(`/api/products/${match.params._id}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      });\r\n\r\n      const result = await res.json();\r\n    }\r\n  };\r\n\r\n  const editProductFn = async (\r\n    title,\r\n    description,\r\n    price,\r\n    category,\r\n    url,\r\n    quantityInStock,\r\n    onSale,\r\n    saleReductionPercent,\r\n    id\r\n  ) => {\r\n    console.log(\"in edit product in client\");\r\n\r\n    setStockQuantity(quantityInStock);\r\n    setDescription(description);\r\n    setPrice(price);\r\n    setName(title);\r\n    setSelectedCategory(category);\r\n    setSale(onSale);\r\n\r\n    setEditProduct(false);\r\n    setStopEditText(\"Done\");\r\n    setReduction(saleReductionPercent);\r\n\r\n    const res = await fetch(`/api/products/${match.params._id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({\r\n        title: title,\r\n        description,\r\n        price,\r\n        category,\r\n        url,\r\n        quantityInStock,\r\n        onSale,\r\n        saleReductionPercent,\r\n      }),\r\n    });\r\n\r\n    const product = await res.json();\r\n\r\n    console.log(\"editing product \", product);\r\n  };\r\n\r\n  const copyProductDetails = () => {\r\n    setStockQuantity(products.quantityInStock);\r\n    setDescription(products.description);\r\n    setPrice(products.price);\r\n    setName(products.title);\r\n    setSelectedCategory(products.category);\r\n    setSale(products.onSale);\r\n    setReduction(products.saleReductionPercent);\r\n    setId(match.params._id);\r\n  };\r\n\r\n  const selectNumberToBuyAddOrRemoveOne = (qty) => {\r\n    if (quantity + qty < 0) {\r\n      setQtyWarn(\"\");\r\n    } else if (quantity + qty <= products.quantityInStock) {\r\n      setQuantity(quantity + qty);\r\n      setQtyWarn(\"\");\r\n    } else {\r\n      switch (products.quantityInStock) {\r\n        case 0:\r\n          setQtyWarn(`There are no more ${products.title}s in stock`);\r\n          break;\r\n        case 1:\r\n          setQtyWarn(`There is only 1 ${products.title} in stock`);\r\n          break;\r\n        default: {\r\n          setQtyWarn(\r\n            `There are only ${products.quantityInStock} ${products.title}s in stock`\r\n          );\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // see here for how to add objects to localStorage:\r\n  // https://stackoverflow.com/questions/2010892/storing-objects-in-html5-localstorage/23516713#23516713\r\n  // https://stackoverflow.com/questions/62504525/persistence-with-localstorage-with-usestate-and-usecontext-react-hooks\r\n  // https://stackoverflow.com/questions/63925254/useeffect-localstorage-loop\r\n  // https://egghead.io/lessons/react-store-values-in-localstorage-with-the-react-useeffect-hook\r\n\r\n  const addToCart = (\r\n    title,\r\n    price,\r\n    image,\r\n    quantity,\r\n    id,\r\n    onSale,\r\n    saleReductionPercent\r\n  ) => {\r\n    setQtyWarn(\"\");\r\n\r\n    // if item is not on sale, change price reduction to 0\r\n    if (!onSale) saleReductionPercent = 0;\r\n    // currentItems is given an empty array if getItem returns null (i.e. if no items have yet been added to cart):\r\n    let currentItems = JSON.parse(localStorage.getItem(\"cartArray\") || \"[]\");\r\n    console.log(\"current # of cart items: \" + currentItems.length);\r\n    currentItems.forEach(function (cartItem, index) {\r\n      console.log(\"[\" + index + \"]: \" + cartItem.id);\r\n    });\r\n    // search to see if item already exists in cart\r\n    var checkItem = currentItems.find(\r\n      (checkItem) => checkItem.productid === id\r\n    );\r\n    if (checkItem) {\r\n      checkItem.quantity += quantity;\r\n    } else {\r\n      currentItems.push({\r\n        title: title,\r\n        price: price,\r\n        image: image,\r\n        quantity: quantity,\r\n        productid: id,\r\n        saleReductionPercent,\r\n      });\r\n    }\r\n    // localStorage.pushArrayItem(\r\n    //   \"cartArray\",\r\n    //   `title: ${title}, price: ${price}, image: ${image}`\r\n    // );\r\n\r\n    localStorage.setItem(\"cartArray\", JSON.stringify(currentItems));\r\n\r\n    if (localStorage.getItem(\"cartQty\")) {\r\n      localStorage.setItem(\r\n        \"cartQty\",\r\n        +localStorage.getItem(\"cartQty\") + quantity\r\n      );\r\n      console.log(\"added to cart qty, total:\", localStorage.getItem(\"cartQty\"));\r\n    } else {\r\n      localStorage.setItem(\"cartQty\", quantity);\r\n      console.log(\r\n        \"initialized cart qty, total:\",\r\n        localStorage.getItem(\"cartQty\")\r\n      );\r\n    }\r\n  };\r\n\r\n  if (products) {\r\n    return (\r\n      <div>\r\n        <CartIcon />\r\n        {user.name === \"Admin\" && (\r\n          <div className=\"outer-group\">\r\n            {!editProduct && (\r\n              <button\r\n                id=\"setEditingButton\"\r\n                style={{\r\n                  background: theme.background,\r\n                  color: theme.foreground,\r\n                }}\r\n                onClick={(e) => {\r\n                  setEditProduct(!editProduct);\r\n                  copyProductDetails();\r\n                }}\r\n              >\r\n                Edit/delete product\r\n              </button>\r\n            )}\r\n            {editProduct && (\r\n              <>\r\n                <button\r\n                  id=\"exitEditButton\"\r\n                  style={{\r\n                    background: theme.background,\r\n                    color: theme.foreground,\r\n                  }}\r\n                  onClick={(e) => setEditProduct(false)}\r\n                >\r\n                  {stopEditText}\r\n                </button>\r\n                <Link to={`/products`}>\r\n                  <button\r\n                    id=\"deleteProductButton\"\r\n                    style={{\r\n                      background: theme.background,\r\n                      color: theme.foreground,\r\n                    }}\r\n                    onClick={(e) => deleteProductFn()}\r\n                  >\r\n                    {deleteProductText}\r\n                  </button>\r\n                </Link>\r\n              </>\r\n            )}\r\n          </div>\r\n        )}\r\n\r\n        {user.name !== \"Admin\" && (\r\n          <div className=\"outer-group\">\r\n            <div className=\"quantity-group\">\r\n              <button\r\n                style={{\r\n                  background: theme.background,\r\n                  color: theme.foreground,\r\n                }}\r\n                className=\"quantityBox quantityButton\"\r\n                onClick={() => {\r\n                  selectNumberToBuyAddOrRemoveOne(-1);\r\n                }}\r\n              >\r\n                -\r\n              </button>\r\n              <div className=\"quantityBox quantity-display\">{quantity}</div>\r\n              <button\r\n                style={{\r\n                  background: theme.background,\r\n                  color: theme.foreground,\r\n                }}\r\n                className=\"quantityBox quantityButton\"\r\n                onClick={() => {\r\n                  selectNumberToBuyAddOrRemoveOne(1);\r\n                }}\r\n              >\r\n                +\r\n              </button>\r\n              <button\r\n                className=\"addToCartButton\"\r\n                style={{\r\n                  background: theme.background,\r\n                  color: theme.foreground,\r\n                }}\r\n                id=\"addToCartButton\"\r\n                onClick={(e) => {\r\n                  addToCart(\r\n                    products.title,\r\n                    products.price,\r\n                    products.image,\r\n                    quantity,\r\n                    match.params._id,\r\n                    products.onSale,\r\n                    products.saleReductionPercent\r\n                  );\r\n                }}\r\n              >\r\n                Add to cart{\" \"}\r\n              </button>\r\n            </div>\r\n            <div style={{ color: \"red\" }}>{quantityWarnText}</div>\r\n          </div>\r\n        )}\r\n        {products.onSale && (\r\n          <div>\r\n            <img className=\"saleIconImg\" src={saleIcon} alt=\"on sale\" />\r\n          </div>\r\n        )}\r\n        {!editProduct && (\r\n          <div className=\"product-title\">{productName || products.title}</div>\r\n        )}\r\n        {user.name === \"Admin\" && editProduct && (\r\n          <div>\r\n            <div>Input name of product:</div>\r\n            <input\r\n              id=\"productName\"\r\n              value={productName}\r\n              onChange={(e) => setName(e.target.value)}\r\n              style={{ color: theme.background, background: theme.foreground }}\r\n            />\r\n            {productName.length === 0 && notAllFieldsFilled && (\r\n              <label for=\"productName\">Enter name of product</label>\r\n            )}\r\n          </div>\r\n        )}\r\n        <div className=\"product-image\">\r\n          <img src={products.image} alt={\"\"} />\r\n        </div>\r\n        <div>\r\n          {!editProduct && (\r\n            <div className=\"product-info\">\r\n              {productDescription || products.description}\r\n            </div>\r\n          )}\r\n          {user.name === \"Admin\" && editProduct && (\r\n            <div>\r\n              <div>Input description of product:</div>\r\n              <input\r\n                id=\"productDescription\"\r\n                value={productDescription}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n                style={{\r\n                  color: theme.background,\r\n                  background: theme.foreground,\r\n                }}\r\n              />{\" \"}\r\n            </div>\r\n          )}\r\n          {!editProduct && !products.onSale && (\r\n            <div className=\"product-info\">\r\n              $ {productPrice || products.price}\r\n            </div>\r\n          )}\r\n          {user.name === \"Admin\" && editProduct && (\r\n            <div>\r\n              <div>Input price of product:</div>\r\n              <input\r\n                id=\"productPrice\"\r\n                value={productPrice}\r\n                onChange={(e) => setPrice(e.target.value)}\r\n                style={{\r\n                  color: theme.background,\r\n                  background: theme.foreground,\r\n                }}\r\n              />\r\n              {products.price.length === 0 && notAllFieldsFilled && (\r\n                <label for=\"productPrice\">Enter price of product</label>\r\n              )}\r\n            </div>\r\n          )}\r\n          {products.onSale && (\r\n            <div>\r\n              <div className=\"product-info\" style={{ color: \"red\" }}>\r\n                Product on sale -{\" \"}\r\n                {saleReductionPercent || products.saleReductionPercent}% off!\r\n                Original price: $ {productPrice || products.price} Reduced to $\r\n                {(\r\n                  ((productPrice || products.price) *\r\n                    (100 -\r\n                      (saleReductionPercent ||\r\n                        products.saleReductionPercent))) /\r\n                  100\r\n                ).toFixed(2)}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </div>\r\n        {!editProduct && (\r\n          <div className=\"product-info\">\r\n            Category: {selectedCategory || products.category}\r\n          </div>\r\n        )}\r\n        {user.name === \"Admin\" && !editProduct && (\r\n          <div className=\"product-info\">\r\n            Number of product in stock: {products.quantityInStock}{\" \"}\r\n          </div>\r\n        )}\r\n        {user.name === \"Admin\" && editProduct && (\r\n          <div>\r\n            {products.length > 0 && (\r\n              <CategorySelectAdmin\r\n                selectedCategory={selectedCategory}\r\n                setSelectedCategory={setSelectedCategory}\r\n                products={products}\r\n              ></CategorySelectAdmin>\r\n            )}\r\n            <div>Number of product in stock:</div>\r\n            <input\r\n              id=\"quantityInStock\"\r\n              value={quantityInStock}\r\n              onChange={(e) => setStockQuantity(e.target.value)}\r\n              style={{ color: theme.background, background: theme.foreground }}\r\n            />\r\n            <div>Put item on sale:</div>\r\n            <input\r\n              id=\"setSale\"\r\n              type=\"checkbox\"\r\n              value={onSale}\r\n              onChange={(e) => setSale(!onSale)}\r\n              style={{ color: theme.background, background: theme.foreground }}\r\n            />\r\n            {onSale && (\r\n              <div>\r\n                <div>Percentage price reduction: </div>\r\n                <input\r\n                  id=\"reductionInput\"\r\n                  value={saleReductionPercent}\r\n                  onChange={(e) => {\r\n                    setReduction(e.target.value);\r\n                  }}\r\n                  style={{\r\n                    color: theme.background,\r\n                    background: theme.foreground,\r\n                  }}\r\n                ></input>\r\n                <div>{saleReductionPercent}</div>\r\n              </div>\r\n            )}\r\n            {quantityInStock.length === 0 && notAllFieldsFilled && (\r\n              <label for=\"quantityInStock\">\r\n                How many of product are in stock?\r\n              </label>\r\n            )}\r\n\r\n            <button\r\n              id=\"addNewProductButton\"\r\n              style={{ background: theme.background, color: theme.foreground }}\r\n              onClick={(e) =>\r\n                editProductFn(\r\n                  productName,\r\n                  productDescription,\r\n                  productPrice,\r\n                  selectedCategory,\r\n                  productURL,\r\n                  quantityInStock,\r\n                  onSale,\r\n                  saleReductionPercent,\r\n                  match.params._id\r\n                )\r\n              }\r\n            >\r\n              Update product details\r\n            </button>\r\n\r\n            {notAllFieldsFilled && (\r\n              <label for=\"addNewProductButton\" style={{ display: \"block\" }}>\r\n                Complete all fields before uploading product update.\r\n              </label>\r\n            )}\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default ProductInfo;\r\n\r\n// {sale.isSale && onSale && (\r\n//   <div>\r\n//     <img src={saleIcon} alt=\"on sale\" />\r\n//   </div>\r\n// )}\r\n\r\n/*\r\n<div style={{ color: \"red\" }}>\r\n                Product on sale! Original price: $ {productPrice} Reduced to ${\" \"}\r\n                {\r\n                  +(\r\n                    productPrice *\r\n                    ((100 - saleReductionPercent) / 100).toFixed(2)\r\n                  )\r\n                }\r\n              </div>\r\n              */\r\n","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\pages\\About\\About.js",[],"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\pages\\Admin\\Admin.js",["133","134","135","136","137","138","139","140","141","142"],"import React, { useState, useEffect, useContext } from \"react\";\r\nimport \"./Admin.css\";\r\n\r\n//components of content:\r\nimport Header from \"../../components/Header/Header\";\r\nimport Products from \"../../components/Products/Products\";\r\n//import SearchKeyword from \"../SearchKeyword/SearchKeyword\";\r\nimport CategorySelectAdmin from \"../../components/CategorySelectAdmin/CategorySelectAdmin\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\nimport SaleContext, { sales } from \"../../contexts/SaleContexts\";\r\n\r\n/*****\r\n * NEED TO ADD NEW FIELDS TO FORM\r\n * *******\r\n */\r\n\r\nconst Admin = () => {\r\n  const [color] = useState(\"red\");\r\n  const [secondsLeft, setSecondsLeft] = useState(65);\r\n  const [salesProductsIds] = useState([1, 3, 5, 6]);\r\n  const [selectedCategory, setSelectedCategory] = useState(\"\");\r\n  const [products, setProducts] = useState([]);\r\n  const [onSale, setSale] = useState(false);\r\n  const [saleReductionPercent, setReduction] = useState(10);\r\n  const [productName, setName] = useState(\"\");\r\n  const [productDescription, setDescription] = useState(\"\");\r\n  const [productURL, setURL] = useState(\"\");\r\n  const [productPrice, setPrice] = useState(\"\");\r\n  const [quantityInStock, setStockQuantity] = useState(\"\");\r\n  const [notAllFieldsFilled, setFieldsFilled] = useState(false);\r\n\r\n  const { theme } = useContext(ThemeContext);\r\n  const { sale } = useContext(SaleContext);\r\n\r\n  console.log(\"theme\", theme, \"on sale?\", onSale);\r\n\r\n  useEffect(() => {\r\n    fetch(\"/api/products\")\r\n      .then((result) => result.json())\r\n      .then((data) => {\r\n        setProducts(data);\r\n      });\r\n    console.log(\"fetched \");\r\n  }, []);\r\n\r\n  const addButtonLabelStyle = {\r\n    display: \"block\",\r\n  };\r\n\r\n  const checkFieldsFilled = (\r\n    title,\r\n    description,\r\n    price,\r\n    category,\r\n    image,\r\n    quantityInStock,\r\n    onSale\r\n  ) => {\r\n    if (\r\n      title.length === 0 ||\r\n      description.length === 0 ||\r\n      price.length === 0 ||\r\n      category.length === 0 ||\r\n      image.length === 0 ||\r\n      quantityInStock.length === 0\r\n    ) {\r\n      setFieldsFilled(true);\r\n    } else {\r\n      setFieldsFilled(false);\r\n    }\r\n  };\r\n\r\n  const addProduct = async (\r\n    title,\r\n    description,\r\n    price,\r\n    category,\r\n    image,\r\n    quantityInStock,\r\n    onSale,\r\n    saleReductionPercent\r\n  ) => {\r\n    //alert(\"adding\");\r\n    console.log(\"in add product in client\");\r\n    // check here if all fields have been filled in:\r\n    //alert(\"checking fields\");\r\n    if (\r\n      title.length === 0 ||\r\n      description.length === 0 ||\r\n      price.length === 0 ||\r\n      category.length === 0 ||\r\n      image.length === 0 ||\r\n      quantityInStock.length === 0\r\n    ) {\r\n      //alert(\"not all filled\");\r\n      setFieldsFilled(true);\r\n    } else {\r\n      //alert(\"all filled\");\r\n      setFieldsFilled(false);\r\n      // upload new product to server\r\n      const res = await fetch(\"/api/products\", {\r\n        method: \"POST\", // or 'PUT'\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          title: title,\r\n          description,\r\n          price,\r\n          category,\r\n          image,\r\n          quantityInStock,\r\n          onSale,\r\n          saleReductionPercent,\r\n        }),\r\n      });\r\n      //alert(\"res is \", res);\r\n      const product = await res.json();\r\n      //alert(\"adding product \", product);\r\n      console.log(\"adding product \", product);\r\n\r\n      setProducts([products, ...products]);\r\n\r\n      // clear Add Product form\r\n      setName(\"\");\r\n      setSelectedCategory(\"\");\r\n      setDescription(\"\");\r\n      setURL(\"\");\r\n      setPrice(\"\");\r\n      setStockQuantity(\"\");\r\n      setSale(false);\r\n      setReduction(10);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div style={{ background: theme.background }}>\r\n      <div>Input name of product:</div>\r\n      <input\r\n        id=\"productName\"\r\n        value={productName}\r\n        onChange={(e) => setName(e.target.value)}\r\n        //onChange={setName(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {productName.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"productName\">Enter name of product</label>\r\n      )}\r\n      <div>Input description of product:</div>\r\n      <input\r\n        id=\"productDescription\"\r\n        value={productDescription}\r\n        onChange={(e) => setDescription(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {productDescription.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"productDescription\">Enter description of product</label>\r\n      )}\r\n      <div>Input image URL of product:</div>\r\n      <input\r\n        id=\"productURL\"\r\n        value={productURL}\r\n        onChange={(e) => setURL(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {productURL.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"productURL\">Enter url of picture of product</label>\r\n      )}\r\n      {productURL.length !== 0 && (\r\n        <div>\r\n          <img\r\n            className=\"thumbImg\"\r\n            src={productURL}\r\n            alt={{ productName }}\r\n          ></img>\r\n        </div>\r\n      )}\r\n      <div>Input price of new product:</div>\r\n      <input\r\n        id=\"productPrice\"\r\n        value={productPrice}\r\n        onChange={(e) => setPrice(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {productPrice.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"productPrice\">Enter price of product</label>\r\n      )}\r\n      {products.length > 0 && (\r\n        <CategorySelectAdmin\r\n          selectedCategory={selectedCategory}\r\n          setSelectedCategory={setSelectedCategory}\r\n          products={products}\r\n        ></CategorySelectAdmin>\r\n      )}\r\n      <div>Number of product in stock:</div>\r\n      <input\r\n        id=\"quantityInStock\"\r\n        value={quantityInStock}\r\n        onChange={(e) => setStockQuantity(e.target.value)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n\r\n      {quantityInStock.length === 0 && notAllFieldsFilled && (\r\n        <label for=\"quantityInStock\">How many of product are in stock?</label>\r\n      )}\r\n      <button\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n        onClick={(e) => {\r\n          alert(\"on slae?\", onSale);\r\n          setSale(!onSale);\r\n        }}\r\n      >\r\n        on slae?\r\n      </button>\r\n      <div>Put item on sale:</div>\r\n      <input\r\n        id=\"setSale\"\r\n        type=\"checkbox\"\r\n        value={onSale}\r\n        onChange={(e) => setSale(!onSale)}\r\n        style={{ color: theme.background, background: theme.foreground }}\r\n      />\r\n      {onSale && (\r\n        <div>\r\n          <div>Percentage price reduction: </div>\r\n          <input\r\n            id=\"reductionInput\"\r\n            value={saleReductionPercent}\r\n            onChange={(e) => {\r\n              setReduction(e.target.value);\r\n            }}\r\n            style={{ color: theme.background, background: theme.foreground }}\r\n          ></input>\r\n        </div>\r\n      )}\r\n      <button\r\n        id=\"addNewProductButton\"\r\n        style={{ background: theme.background, color: theme.foreground }}\r\n        onClick={(e) =>\r\n          addProduct(\r\n            productName,\r\n            productDescription,\r\n            productPrice,\r\n            selectedCategory,\r\n            productURL,\r\n            quantityInStock,\r\n            onSale,\r\n            saleReductionPercent\r\n          )\r\n        }\r\n      >\r\n        Add new product\r\n      </button>\r\n      {notAllFieldsFilled && (\r\n        <label for=\"addNewProductButton\" style={{ display: \"block\" }}>\r\n          Complete all fields before uploading new product.\r\n        </label>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Admin;\r\n\r\n/*\r\naddProduct(\r\n            productName,\r\n            productDescription,\r\n            productPrice,\r\n            selectedCategory,\r\n            productURL,\r\n            quantityInStock,\r\n            onSale\r\n          )\r\n          */\r\n","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\Header\\Header.js",["143"],"import { React, useContext } from \"react\";\r\nimport SaleCountdown from \"../SaleCountdown/SaleCountdown\";\r\nimport PropTypes from \"prop-types\";\r\nimport CategorySelect from \"../CategorySelect/CategorySelect\";\r\nimport SliderFilterPrice from \"../SliderFilterPrice/SliderFilterPrice\";\r\nimport \"./Header.css\";\r\nimport SearchKeyword from \"../SearchKeyword/SearchKeyword\";\r\nimport \"../../components/storagetools/LocalStorageArrayTools.js\";\r\nimport CartIcon from \"../CartIcon/CartIcon\";\r\nimport UserContext from \"../../contexts/UserContexts\";\r\n\r\nconst Header = (props) => {\r\n  const {\r\n    selectedCategory,\r\n    setSelectedCategory,\r\n    secondsLeft,\r\n    setSecondsLeft,\r\n    isSale,\r\n    setSale,\r\n    products,\r\n    setProducts,\r\n    priceRange,\r\n    setPriceRange,\r\n    searchKeyword,\r\n    setSearch,\r\n  } = props;\r\n\r\n  const { user, toggleUser } = useContext(UserContext);\r\n\r\n  //const theme = useContext(ThemeContext);\r\n\r\n  return (\r\n    <div>\r\n      {user.name === \"Guest\" && <CartIcon />}\r\n      <SaleCountdown\r\n        secondsLeft={secondsLeft}\r\n        setSecondsLeft={setSecondsLeft}\r\n        isSale={isSale}\r\n        setSale={setSale}\r\n      ></SaleCountdown>\r\n      {products.length > 0 && (\r\n        <CategorySelect\r\n          selectedCategory={selectedCategory}\r\n          setSelectedCategory={setSelectedCategory}\r\n          products={products}\r\n          setProducts={setProducts}\r\n        ></CategorySelect>\r\n      )}\r\n      {products.length > 0 && (\r\n        <SearchKeyword\r\n          searchKeyword={searchKeyword}\r\n          setSearch={setSearch}\r\n          products={products}\r\n          setProducts={setProducts}\r\n        ></SearchKeyword>\r\n      )}\r\n      <div className=\"price-range\">\r\n        <SliderFilterPrice\r\n          priceRange={priceRange}\r\n          setPriceRange={setPriceRange}\r\n          products={products}\r\n        ></SliderFilterPrice>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nHeader.propTypes = {\r\n  secondsLeft: PropTypes.number,\r\n  categories: PropTypes.arrayOf(PropTypes.string),\r\n  selectedCategory: PropTypes.string,\r\n  setSelectedCategory: PropTypes.func,\r\n};\r\n/* need to add proptypes of products*/\r\n\r\nexport default Header;\r\n\r\n/*      return (\r\n        <div>\r\n          <h1> App</h1>\r\n          <SaleCountdown\r\n            secondsLeft={secondsLeft}\r\n            setSecondsLeft={setSecondsLeft}\r\n            isSale={isSale}\r\n            setSale={setSale}\r\n          ></SaleCountdown>\r\n          {products.length > 0 && (\r\n            <CategorySelect\r\n              selectedCategory={selectedCategory}\r\n              setSelectedCategory={setSelectedCategory}\r\n              products={products}\r\n            ></CategorySelect>\r\n            <SliderFilterPrice priceRange={priceRange}></SliderFilterPrice}\r\n          )}\r\n        </div>\r\n      );\r\n      */\r\n","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\Products\\Products.js",[],"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\CategorySelect\\CategorySelect.js",[],"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\SaleCountdown\\SaleCountdown.js",["144"],"import React, { useEffect, useRef, useContext } from \"react\";\r\nimport \"./SaleCountdown.css\";\r\nimport PropTypes from \"prop-types\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\n\r\n/* this component is called by the Header component *\r\n\r\n/* counts down by seconds the time left until the end of the sale,\r\nand sets state of display message depending on whether the sale has finished */\r\n\r\nconst SaleCountdown = (props) => {\r\n  const { secondsLeft, setSecondsLeft, isSale, setSale } = props;\r\n  const [theme] = useContext(ThemeContext);\r\n\r\n  const convertToDHMS = () => {\r\n    let temp = \"\";\r\n    if (secondsLeft) {\r\n      temp = `\r\n      ${Math.floor(secondsLeft / (60 * 60 * 24))}:${Math.floor(\r\n        (secondsLeft / (60 * 60)) % 24\r\n      )}:`;\r\n      temp = `${temp}${Math.floor((secondsLeft / 60) % 60)}:${Math.floor(\r\n        secondsLeft % 60\r\n      )}`;\r\n      return temp;\r\n    }\r\n  };\r\n\r\n  /************************************ */\r\n  /* version using setTimeout.\r\n  /************************************ */\r\n  /*without the use of useRef, we could not use setInterval here, as it causes an infinite loop! \r\n  /* Each time the state of DHMSLeft is updated, useEffect sets a 1 second timeout.\r\n  At the end of the timeout, the state of the DHMSLeft and secondsLeft update, and so the useEffect runs again,\r\n  and sets another 1 second timeout.\r\n  If the secondsLeft reaches zero\r\n \r\n  useEffect(() => {\r\n    const countdown = setTimeout(() => {\r\n      if (secondsLeft) {\r\n        setSecondsLeft(secondsLeft - 1);\r\n      }\r\n    }, 1000);\r\n\r\n    return () => clearTimeout(countdown);\r\n    */\r\n\r\n  /************************************ */\r\n  /* version using setInterval - needs to use useRef.\r\n  /************************************ */\r\n  const intervalRef = useRef();\r\n\r\n  useEffect(() => {\r\n    const countdown = setInterval(() => {\r\n      if (secondsLeft) {\r\n        setSecondsLeft(secondsLeft - 1);\r\n        console.log(\"counting down, secs:\", secondsLeft);\r\n        setSale(\"true\");\r\n      } else {\r\n        setSale(\"false\");\r\n      }\r\n    }, 1000);\r\n\r\n    //use useRef to create a mutable ref object from the setTimeout identifier (\"countdown\").\r\n    // This lets the timeout id be accessible from the whole component.\r\n    // If we stored the id in a state variable, the component would be re-rendered\r\n    // after the state update so a new interval will be created, creating an infinite loop.\r\n    intervalRef.current = countdown;\r\n\r\n    /********************** */\r\n    /* EXPLANATION:          */\r\n    /********************** */\r\n    /* the intervalRef's current value is updated if starting a new countdown, \r\n    but the intervalRef itself stays fixed in the DOM and doesn't re-render when there's a change in \r\n    state of the secondsLeft variable\r\n    This how the infinite loop is prevented.\r\n    */\r\n\r\n    // Clear timeout if the component is unmounted\r\n    return () => clearTimeout(countdown);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [secondsLeft]);\r\n  //The return will runs each time useEffect finishes the timeout except for the first time\r\n  // and clears the timeout if the component is unmounted\r\n\r\n  const saleMessage = () => {\r\n    return secondsLeft\r\n      ? `10% off!! ${convertToDHMS(\r\n          secondsLeft\r\n        )} days left until the end of the Sale`\r\n      : \"Sale over\";\r\n  };\r\n\r\n  return (\r\n    <div style={{ color: theme.foreground, background: theme.background }}>\r\n      <h2 id=\"message\">{saleMessage()} </h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nSaleCountdown.propTypes = {\r\n  secondsLeft: PropTypes.number,\r\n  setSecondsLeft: PropTypes.func,\r\n};\r\n\r\nexport default SaleCountdown;\r\n","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\ChangeThemeColors\\ChangeThemeColors.js",[],"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\SliderFilterPrice\\SliderFilterPrice.js",["145"],"import React, { useEffect, useContext } from \"react\";\r\n// need to install and design: npm install antd\r\nimport { Slider } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport ThemeContext, { currentTheme } from \"../../contexts/ThemeContexts\";\r\n\r\nconst SliderFilterPrice = (props) => {\r\n  const { priceRange, setPriceRange, products } = props;\r\n  const { theme } = useContext(ThemeContext);\r\n\r\n  useEffect(() => {\r\n    if (products.length) {\r\n      console.log(\"prods are \", products);\r\n      let max = 0;\r\n      for (let i = 0; i < products.length; i++) {\r\n        max = products[i].price > max ? products[i].price : max;\r\n        console.log(\"max: \", max);\r\n      }\r\n      setPriceRange([0, max + 5]);\r\n      console.log(\"max price is: \", max);\r\n    }\r\n  }, [products, setPriceRange]);\r\n\r\n  //const [disabled] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      <div style={{ color: theme.foreground, background: theme.background }}>\r\n        Select Price range:\r\n      </div>\r\n      <Slider\r\n        range\r\n        defaultValue={[0, 1000]}\r\n        min={0}\r\n        max={1000}\r\n        value={priceRange}\r\n        onChange={setPriceRange}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SliderFilterPrice;\r\n\r\n/*\r\n /* {\r\n    Object.keys(groupBy(products, \"price\")).map((price) => price);\r\n  }*/\r\n\r\n// useEffect(() => {\r\n/* setPriceRange(() => [\r\n      0,\r\n      Math.max(\r\n        ...products.map(\r\n          (product) => product.price.map((o) => o.y).map((o) => o.y),\r\n          0\r\n        )\r\n      ),\r\n    ]);*/\r\n//products.map((product) => product.price.map((o) => console.log(o)));\r\n/*console.log(\r\n      \"max: \",\r\n      Math.max(...products.map((product) => product.price), 0)\r\n    );\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n // }, []);\r\n  // const maxValueOfY = Math.max(...arrayToSearchIn.map(o => o.y), 0);\r\n*/\r\n","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\SearchKeyword\\SearchKeyword.js",[],"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\ProductDisplayClass\\ProductDisplayClass.js",["146","147","148","149","150"],"import React, { useContext } from \"react\";\r\nimport \"./ProductDisplayClass.css\";\r\nimport PropTypes from \"prop-types\";\r\n//import saleIcon from \"../icons/sale.png\";\r\nimport SaleContext, { sales } from \"../../contexts/SaleContexts\";\r\n//import ProductInfo from \"../../pages/ProductInfo/ProductInfo\";\r\nimport ThemeContext, { themes } from \"../../contexts/ThemeContexts\";\r\n\r\n/* this component is called from the Products class.\r\n   It renders individual products cards (product title, image, price).\r\n   If the product is a sale item, its title and sale price are colored until the sale ends \r\n   */\r\n\r\nconst ProductDisplayClass = (props) => {\r\n  const {\r\n    secondsLeft,\r\n    selectedCategory,\r\n    title,\r\n    image,\r\n    price,\r\n    productid,\r\n    category,\r\n    onSale,\r\n    saleReductionPercent,\r\n    isSale,\r\n    quantityInStock,\r\n    priceRange,\r\n  } = props;\r\n\r\n  const { theme } = useContext(ThemeContext);\r\n  const { sale } = useContext(SaleContext);\r\n\r\n  // const newPrice =\r\n  //   onSale && sale.isSale ? ` Sale: $ ${+(price * 0.9).toFixed(2)}` : \"\";\r\n\r\n  const newPrice = onSale\r\n    ? ` Sale: $ ${+((price * (100 - saleReductionPercent)) / 100).toFixed(2)}`\r\n    : \"\";\r\n\r\n  /* renders an individual product card, containing product information and image.\r\n  the information an image are obtained from the props which are passed from the ProductsContainerClass */\r\n\r\n  return (\r\n    (!selectedCategory || category === selectedCategory) &&\r\n    price < priceRange[1] &&\r\n    price > priceRange[0] && (\r\n      <div\r\n        className=\" hvr-shutter-out-vertical\"\r\n        style={{ color: theme.foreground, background: \"white\" }}\r\n      >\r\n        <div className=\"product-info\">\r\n          {onSale && <div className=\"product-banner-sale\">SALE</div>}\r\n          {!onSale && <div className=\"product-banner-nosale\"></div>}\r\n          <h6\r\n            style={{\r\n              color: onSale ? theme.salePriceColor : \"black\",\r\n            }}\r\n          >\r\n            {title}\r\n          </h6>\r\n        </div>\r\n        <div className=\"product-image\">\r\n          <img src={image} alt={\"\"} />\r\n        </div>\r\n        <div className=\"product-info\">\r\n          <h5>$ {price}</h5>\r\n          <h5\r\n            style={{\r\n              color: theme.salePriceColor,\r\n              display: newPrice && secondsLeft ? \"block\" : \"none\",\r\n            }}\r\n          >\r\n            {saleReductionPercent}% off! {newPrice}\r\n          </h5>\r\n          <h5>{quantityInStock} in stock</h5>\r\n        </div>\r\n      </div>\r\n    )\r\n  );\r\n};\r\n\r\nProductDisplayClass.propTypes = {\r\n  secondsLeft: PropTypes.number,\r\n  color: PropTypes.string,\r\n  price: PropTypes.number,\r\n  selectedCategory: PropTypes.string,\r\n  title: PropTypes.string,\r\n  image: PropTypes.string,\r\n  salesProductsIds: PropTypes.arrayOf(PropTypes.number),\r\n  category: PropTypes.string,\r\n  quantityInStock: PropTypes.number,\r\n  onSale: PropTypes.bool,\r\n};\r\n\r\nexport default ProductDisplayClass;\r\n\r\n/* version with sale icon:\r\n<div className=\"product-info\">\r\n          {onSale && <img src={saleIcon} alt=\"sale item\"></img>}\r\n          <h6\r\n            style={{\r\n              color: onSale ? theme.salePriceColor : \"black\",\r\n            }}\r\n          >\r\n            {title}\r\n          </h6>\r\n        </div> */\r\n","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\ListCategories\\ListCategories.js",[],"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\contexts\\UserContexts.js",[],"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\DisplayUser\\DisplayUser.js",["151","152","153","154","155"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport UserContext from \"../../contexts/UserContexts\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\nimport ChangeUser from \"../ChangeUser/ChangeUser\";\r\n\r\nconst DisplayUser = () => {\r\n  const { user, toggleUser } = useContext(UserContext);\r\n  const { theme, toggleTheme } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <div style={{ paddingBottom: \"20px\" }}>\r\n      <div>Welcome {user.name}</div>\r\n      <ChangeUser />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DisplayUser;\r\n","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\ChangeUser\\ChangeUser.js",["156"],"import React, { useContext } from \"react\";\r\nimport UserContext from \"../../contexts/UserContexts\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\n\r\nconst ChangeUser = () => {\r\n  const { user, toggleUser } = useContext(UserContext);\r\n  const { theme, toggleTheme } = useContext(ThemeContext);\r\n\r\n  return (\r\n    <button\r\n      style={{\r\n        background: theme.background,\r\n        color: theme.foreground,\r\n      }}\r\n      onClick={toggleUser}\r\n    >\r\n      {user.name === \"Admin\" && <div>Login as Guest</div>}\r\n      {user.name === \"Guest\" && <div>Login as Admin</div>}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default ChangeUser;\r\n","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\CategorySelectAdmin\\CategorySelectAdmin.js",[],"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\storagetools\\LocalStorageArrayTools.js",[],"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\contexts\\SaleContexts.js",["157"],"import { createContext } from \"react\";\r\nimport { withRouter } from \"react-router\";\r\n\r\nconst sales = {\r\n  endOfYearSale: {\r\n    isSale: \"true\",\r\n    percentOff: 20,\r\n    dateEnd: \"2021-10-25\",\r\n    name: \"End of Year Sale\",\r\n    color: \"#002200\",\r\n  },\r\n  noSale: {\r\n    isSale: \"false\",\r\n    percentOff: 0,\r\n    dateEnd: \"2015-03-25\",\r\n    name: \"No special offers\",\r\n    color: \"#002200\",\r\n  },\r\n  summerSale: {\r\n    isSale: \"true\",\r\n    percentOff: 10,\r\n    dateEnd: \"2020-08-31\",\r\n    name: \"Summer Sale\",\r\n    color: \"#002200\",\r\n  },\r\n};\r\n\r\nlet currentSale = sales.endOfYearSale;\r\nconst SaleContext = createContext(null);\r\nexport { sales, currentSale };\r\nexport default SaleContext;\r\n","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\CartIcon\\CartIcon.js",["158","159","160"],"import { React, useState, useEffect, useReducer } from \"react\";\r\nimport cartIcon from \"../../components/icons/shoppingCart.png\";\r\nimport \"../../components/storagetools/LocalStorageArrayTools.js\";\r\nimport \"./CartIcon.css\";\r\nimport CartDisplayContents from \"../CartDisplayContents/CartDisplayContents\";\r\n\r\nconst CartIcon = (props) => {\r\n  const [showCartContents, setShowCart] = useState(false);\r\n  //const [cartNumItems, setNumItems] = useState(0);\r\n  const [cartNumItems, setCartNumItems] = useReducer((prev, cur) => {\r\n    localStorage.setItem(\"cartQty\", JSON.stringify(cur));\r\n    return cur;\r\n  }, JSON.parse(localStorage.getItem(\"cartQty\")));\r\n\r\n  /*  const [cartNumItems, setCartNumItems] = useReducer((prev, cur) => {\r\n    localStorage.getItem(\"cartQty\", JSON.stringify(cur));\r\n    return cur;\r\n    //localStorage.getItem(\"cartArray\", JSON.stringify(cur));\r\n    //return cur.length;\r\n  }, JSON.parse(localStorage.getItem(\"cartArray\")));*/\r\n\r\n  // see google on \"localstorage dependency in useeffect\"\r\n  // useEffect(() => {\r\n  //   setCartNumItems(localStorage.getItem(\"cartQty\"));\r\n  // }, localStorage);\r\n\r\n  return (\r\n    <div className=\"cartWindow\">\r\n      <div className=\"cartContainer hvr-skew-forward\">\r\n        <img\r\n          className=\"cartIcon \"\r\n          src={cartIcon}\r\n          alt=\"Shopping cart icon\"\r\n          onClick={(e) => {\r\n            setShowCart(true);\r\n          }}\r\n        />\r\n        {cartNumItems > 0 && (\r\n          <div>\r\n            <div className=\"numCartItemsDisplay\">\r\n              {localStorage.getItem(\"cartQty\")}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      {cartNumItems > 0 && <CartDisplayContents />}\r\n    </div>\r\n  );\r\n};\r\nexport default CartIcon;\r\n\r\n/*onClick={(e) => {\r\n            setShowCart(true);\r\n          }}*/\r\n/* onClick={alert} */\r\n","C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\CartDisplayContents\\CartDisplayContents.js",[],"C:\\dev\\coding\\30 server shop\\myShop\\client\\src\\components\\CartItem\\CartItem.js",["161","162","163","164","165","166"],"import React, { useContext, useState, useReducer } from \"react\";\r\nimport ThemeContext from \"../../contexts/ThemeContexts\";\r\nimport \"./CartItem.css\";\r\nimport sale from \"../icons/saleGreen.png\";\r\nimport deleteIcon from \"../icons/trash.png\";\r\nimport editIcon from \"../icons/editIcon.png\";\r\nimport upArrow from \"../icons/upArrow.png\";\r\nimport downArrow from \"../icons/downArrow.png\";\r\nimport \"../../components/storagetools/LocalStorageArrayTools.js\";\r\n\r\nconst CartItem = ({ item }) => {\r\n  const { theme, toggleTheme } = useContext(ThemeContext);\r\n  const [qtyLabe, setQtyLabel] = useState(\"\");\r\n\r\n  const isSale = true;\r\n  //console.log(\"cart item: \", item);\r\n  //console.log(`cart item: ${item.title}, ${item.price}`);\r\n\r\n  const removeFromCart = (id) => {\r\n    // currentItems is given an empty array if getItem returns null (i.e. if no items have yet been added to cart):\r\n    let currentItems = JSON.parse(localStorage.getItem(\"cartArray\") || \"[]\");\r\n\r\n    // find index of item in cart array\r\n    const index = currentItems.findIndex(\r\n      (findItem) => findItem.productid === id\r\n    );\r\n\r\n    // then use index to take item out of array\r\n    console.log(\"id of item: \", id);\r\n    const quantityInCart = currentItems[index].quantity;\r\n    console.log(\"index of item to remove: \", index);\r\n    currentItems = [\r\n      ...currentItems.slice(0, index),\r\n      ...currentItems.slice(index + 1),\r\n    ];\r\n\r\n    // localStorage.pushArrayItem(\r\n    //   \"cartArray\",\r\n    //   `title: ${title}, price: ${price}, image: ${image}`\r\n    // );\r\n\r\n    localStorage.setItem(\"cartArray\", JSON.stringify(currentItems));\r\n    let origCartQty = JSON.parse(localStorage.getItem(\"cartQty\"));\r\n    alert(\"orig qty:\", origCartQty);\r\n\r\n    origCartQty -= quantityInCart;\r\n    alert(\"orig qty:\", origCartQty);\r\n\r\n    localStorage.setItem(\"cartQty\", origCartQty);\r\n  };\r\n\r\n  const editItemCartQty = (id, quantityInStock, qty) => {\r\n    // currentItems is given an empty array if getItem returns null (i.e. if no items have yet been added to cart):\r\n    let currentItems = JSON.parse(localStorage.getItem(\"cartArray\") || \"[]\");\r\n\r\n    // find index of item in cart array\r\n    const index = currentItems.findIndex(\r\n      (findItem) => findItem.productid === id\r\n    );\r\n\r\n    // then use index to take item out of array\r\n    if (currentItems[index].quantity + qty <= quantityInStock)\r\n      currentItems[index].quantity += qty;\r\n\r\n    // localStorage.pushArrayItem(\r\n    //   \"cartArray\",\r\n    //   `title: ${title}, price: ${price}, image: ${image}`\r\n    // );\r\n\r\n    localStorage.setItem(\"cartArray\", JSON.stringify(currentItems));\r\n\r\n    // update as well total number of items in cart\r\n    let origCartQty = JSON.parse(localStorage.getItem(\"cartQty\"));\r\n    origCartQty += qty;\r\n    localStorage.setItem(\"cartQty\", origCartQty);\r\n  };\r\n\r\n  return (\r\n    <div className=\"cartItemDisplay\">\r\n      <div className=\"itemIconImage\">\r\n        {isSale && <img className=\"saleIcon\" src={sale} alt=\"sale icon\" />}\r\n        <img className=\"itemIcon\" src={item.image} alt=\"showing the item\" />\r\n      </div>\r\n      <div className=\"itemName\">{item.title}</div>\r\n      {item.saleReductionPercent > 0 && (\r\n        <div style={{ color: \"red\" }} className=\"itemPrice\">\r\n          sale price: ${(item.price * (100 - item.saleReductionPercent)) / 100}\r\n        </div>\r\n      )}\r\n      {item.saleReductionPercent === 0 && (\r\n        <div className=\"itemPrice\">price: ${item.price} </div>\r\n      )}\r\n\r\n      <div className=\"itemQtyBoxContainer\">\r\n        <div className=\"itemQtyBox\">\r\n          <div className=\"itemPrice\">quantity: </div>\r\n\r\n          <div className=\"itemQtyNumArrows\">\r\n            <img\r\n              className=\"upDownIcon\"\r\n              src={downArrow}\r\n              alt=\"click here to reduce item quantity\"\r\n              onClick={(e) =>\r\n                editItemCartQty(item.productid, item.quantityInStock, -1)\r\n              }\r\n            />\r\n            <div id=\"itemQuantity\" className=\"itemQuantity\">\r\n              {item.quantity}\r\n            </div>\r\n            <img\r\n              className=\"upDownIcon\"\r\n              src={upArrow}\r\n              alt=\"click here to increase item quantity\"\r\n              onClick={(e) =>\r\n                editItemCartQty(item.productid, item.quantityInStock, 1)\r\n              }\r\n            />\r\n          </div>\r\n\r\n          <img\r\n            className=\"deleteIcon\"\r\n            src={deleteIcon}\r\n            alt=\"click here to remove item from cart\"\r\n            onClick={(e) => removeFromCart(item.productid)}\r\n          />\r\n        </div>\r\n\r\n        <label for=\"itemQuantity\">\r\n          There are only {item.quantityInStock} items in stock\r\n        </label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\nexport default CartItem;\r\n",{"ruleId":"167","replacedBy":"168"},{"ruleId":"169","replacedBy":"170"},{"ruleId":"171","severity":1,"message":"172","line":2,"column":8,"nodeType":"173","messageId":"174","endLine":2,"endColumn":19},{"ruleId":"171","severity":1,"message":"175","line":4,"column":8,"nodeType":"173","messageId":"174","endLine":4,"endColumn":19},{"ruleId":"171","severity":1,"message":"176","line":4,"column":23,"nodeType":"173","messageId":"174","endLine":4,"endColumn":28},{"ruleId":"171","severity":1,"message":"177","line":18,"column":17,"nodeType":"173","messageId":"174","endLine":18,"endColumn":27},{"ruleId":"171","severity":1,"message":"178","line":6,"column":24,"nodeType":"173","messageId":"174","endLine":6,"endColumn":30},{"ruleId":"171","severity":1,"message":"176","line":7,"column":23,"nodeType":"173","messageId":"174","endLine":7,"endColumn":28},{"ruleId":"171","severity":1,"message":"177","line":35,"column":17,"nodeType":"173","messageId":"174","endLine":35,"endColumn":27},{"ruleId":"171","severity":1,"message":"179","line":37,"column":11,"nodeType":"173","messageId":"174","endLine":37,"endColumn":15},{"ruleId":"171","severity":1,"message":"180","line":40,"column":30,"nodeType":"173","messageId":"174","endLine":40,"endColumn":45},{"ruleId":"171","severity":1,"message":"181","line":46,"column":10,"nodeType":"173","messageId":"174","endLine":46,"endColumn":19},{"ruleId":"171","severity":1,"message":"182","line":49,"column":22,"nodeType":"173","messageId":"174","endLine":49,"endColumn":28},{"ruleId":"171","severity":1,"message":"183","line":81,"column":13,"nodeType":"173","messageId":"174","endLine":81,"endColumn":19},{"ruleId":"171","severity":1,"message":"184","line":5,"column":8,"nodeType":"173","messageId":"174","endLine":5,"endColumn":14},{"ruleId":"171","severity":1,"message":"185","line":6,"column":8,"nodeType":"173","messageId":"174","endLine":6,"endColumn":16},{"ruleId":"171","severity":1,"message":"176","line":10,"column":23,"nodeType":"173","messageId":"174","endLine":10,"endColumn":28},{"ruleId":"171","severity":1,"message":"186","line":18,"column":10,"nodeType":"173","messageId":"174","endLine":18,"endColumn":15},{"ruleId":"171","severity":1,"message":"187","line":19,"column":10,"nodeType":"173","messageId":"174","endLine":19,"endColumn":21},{"ruleId":"171","severity":1,"message":"188","line":19,"column":23,"nodeType":"173","messageId":"174","endLine":19,"endColumn":37},{"ruleId":"171","severity":1,"message":"189","line":20,"column":10,"nodeType":"173","messageId":"174","endLine":20,"endColumn":26},{"ruleId":"171","severity":1,"message":"179","line":33,"column":11,"nodeType":"173","messageId":"174","endLine":33,"endColumn":15},{"ruleId":"171","severity":1,"message":"190","line":46,"column":9,"nodeType":"173","messageId":"174","endLine":46,"endColumn":28},{"ruleId":"171","severity":1,"message":"191","line":50,"column":9,"nodeType":"173","messageId":"174","endLine":50,"endColumn":26},{"ruleId":"171","severity":1,"message":"177","line":28,"column":17,"nodeType":"173","messageId":"174","endLine":28,"endColumn":27},{"ruleId":"171","severity":1,"message":"192","line":12,"column":40,"nodeType":"173","messageId":"174","endLine":12,"endColumn":46},{"ruleId":"171","severity":1,"message":"193","line":5,"column":24,"nodeType":"173","messageId":"174","endLine":5,"endColumn":36},{"ruleId":"171","severity":1,"message":"176","line":5,"column":23,"nodeType":"173","messageId":"174","endLine":5,"endColumn":28},{"ruleId":"171","severity":1,"message":"178","line":7,"column":24,"nodeType":"173","messageId":"174","endLine":7,"endColumn":30},{"ruleId":"171","severity":1,"message":"194","line":21,"column":5,"nodeType":"173","messageId":"174","endLine":21,"endColumn":14},{"ruleId":"171","severity":1,"message":"192","line":25,"column":5,"nodeType":"173","messageId":"174","endLine":25,"endColumn":11},{"ruleId":"171","severity":1,"message":"179","line":31,"column":11,"nodeType":"173","messageId":"174","endLine":31,"endColumn":15},{"ruleId":"171","severity":1,"message":"195","line":1,"column":29,"nodeType":"173","messageId":"174","endLine":1,"endColumn":37},{"ruleId":"171","severity":1,"message":"196","line":1,"column":39,"nodeType":"173","messageId":"174","endLine":1,"endColumn":48},{"ruleId":"171","severity":1,"message":"177","line":7,"column":17,"nodeType":"173","messageId":"174","endLine":7,"endColumn":27},{"ruleId":"171","severity":1,"message":"197","line":8,"column":11,"nodeType":"173","messageId":"174","endLine":8,"endColumn":16},{"ruleId":"171","severity":1,"message":"198","line":8,"column":18,"nodeType":"173","messageId":"174","endLine":8,"endColumn":29},{"ruleId":"171","severity":1,"message":"198","line":7,"column":18,"nodeType":"173","messageId":"174","endLine":7,"endColumn":29},{"ruleId":"171","severity":1,"message":"199","line":2,"column":10,"nodeType":"173","messageId":"174","endLine":2,"endColumn":20},{"ruleId":"171","severity":1,"message":"196","line":1,"column":27,"nodeType":"173","messageId":"174","endLine":1,"endColumn":36},{"ruleId":"171","severity":1,"message":"200","line":8,"column":10,"nodeType":"173","messageId":"174","endLine":8,"endColumn":26},{"ruleId":"171","severity":1,"message":"201","line":10,"column":24,"nodeType":"173","messageId":"174","endLine":10,"endColumn":39},{"ruleId":"171","severity":1,"message":"202","line":1,"column":39,"nodeType":"173","messageId":"174","endLine":1,"endColumn":49},{"ruleId":"171","severity":1,"message":"203","line":6,"column":8,"nodeType":"173","messageId":"174","endLine":6,"endColumn":16},{"ruleId":"171","severity":1,"message":"197","line":12,"column":11,"nodeType":"173","messageId":"174","endLine":12,"endColumn":16},{"ruleId":"171","severity":1,"message":"198","line":12,"column":18,"nodeType":"173","messageId":"174","endLine":12,"endColumn":29},{"ruleId":"171","severity":1,"message":"204","line":13,"column":10,"nodeType":"173","messageId":"174","endLine":13,"endColumn":17},{"ruleId":"171","severity":1,"message":"205","line":13,"column":19,"nodeType":"173","messageId":"174","endLine":13,"endColumn":30},"no-native-reassign",["206"],"no-negated-in-lhs",["207"],"no-unused-vars","'DisplayUser' is defined but never used.","Identifier","unusedVar","'SaleContext' is defined but never used.","'sales' is defined but never used.","'toggleUser' is assigned a value but never used.","'themes' is defined but never used.","'sale' is assigned a value but never used.","'setFieldsFilled' is assigned a value but never used.","'productId' is assigned a value but never used.","'setURL' is assigned a value but never used.","'result' is assigned a value but never used.","'Header' is defined but never used.","'Products' is defined but never used.","'color' is assigned a value but never used.","'secondsLeft' is assigned a value but never used.","'setSecondsLeft' is assigned a value but never used.","'salesProductsIds' is assigned a value but never used.","'addButtonLabelStyle' is assigned a value but never used.","'checkFieldsFilled' is assigned a value but never used.","'isSale' is assigned a value but never used.","'currentTheme' is defined but never used.","'productid' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'theme' is assigned a value but never used.","'toggleTheme' is assigned a value but never used.","'withRouter' is defined but never used.","'showCartContents' is assigned a value but never used.","'setCartNumItems' is assigned a value but never used.","'useReducer' is defined but never used.","'editIcon' is defined but never used.","'qtyLabe' is assigned a value but never used.","'setQtyLabel' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]