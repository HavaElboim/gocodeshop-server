// import the express package, installed earlier using: npm install express
const express = require("express");
// import middleware to accept post requests:
const bodyParser = require("body-parser");

// call the express function which returns an express server application
const app = express();
// use the body-parser addition:
app.use(bodyParser.json());

// add mongoose to communicate with mongoDB
// - see https://mongoosejs.com/docs/index.html
const mongoose = require("mongoose");
mongoose.connect("mongodb://localhost/gocodeshop", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

var cors = require("cors");
app.use(cors());

const productSchema = new mongoose.Schema({
  //title: { type: String, required: true },
  title: String,
  price: { type: Number, default: 10 },
  description: { type: String, default: "" },
  // slug is a user-friendly and user-defined version of the product id
  // since the id generated by the server is a long and complex number
  slug: { type: String, unique: true },
});

const Product = mongoose.model("Product", productSchema);

// provide data to be displayed on the / page of the server's website
app.get("/", (req, res) => {
  res.send("Hello world");
});

app.get("/products", async (req, res) => {
  console.log("search for all products");
  Product.find({})
    .then((products) => res.json(products))
    .catch((err) => res.status(404).json({ success: false }));
});

//adding option to serve requests with parameters:
// client will access a product with given productid using:
// https://localhost:8000/:idnum
app.get("/products/:id", async (req, res) => {
  console.log("received request for product id: ", req.params.id);

  //const productId = req.params.id;
  //console.log("productId is ", productId);
  // old version fetching from json or array of data objects:
  //const product = products.find((product) => product.id === +productId); // use + to change productId from string to number
  //console.log("found product: ", product);
  // old version
  //res.send(product ?? {});

  // using MongoDB and Mongoose:
  // define which collection from the db:
  // with Mongo, get the relevant product directly with the product id:
  // by default, findById looks in the db for id generated by the db, i.e.
  // _id (and not id)
  // - inspect the db by MongoDB Compass to see the id for each record

  const { id } = req.params.id; ///here we do destructuring - we take out the params called id from the params array

  //const product = await Product.findById(id);
  // Product.findById(id)
  //  .then((products) => res.json(products))
  //   .catch((err) => res.status(404).json({ success: false }));

  Product.findById(req.params.id).exec(function (err, product) {
    if (err) {
      console.error("Error retrieving product by id!");
    } else {
      console.log("server product = " + JSON.stringify(product));
      res.json(product);
    }
  });
});

// set a port number to be used for the server

// post: to add an item to the database
// - must define Schema for documents (records) in the database
app.post("/products", (req, res) => {
  // if have defined slug for each product, search by slug instead of by id:
  // app.get("products/:slug") etc

  // define "Product" as collection,
  // then Mongoose will go to "Products" (with `s` at the end)
  // during app.get later on in the code

  const { title, price, description, category } = req.body;

  //const product = new Product({ title, price, description, category }).save();
  //const product = new Product(req.params).save();
  Product.insertOne(title, price, description, category).exec();

  res.send("OK");
});

// put : to change a value of an item in the database
// define the put as an async function
app.put("/products/:id", async (req, res) => {
  const { title } = req.body; // pass the new title in the body of the put request
  // const product = products.find((product) => product.id === +productId);
  // product.title = title; // here have changed the title of the product in the database
  //res.send("ok!");

  // identify the project by the id generated by the server, which has the
  // key _id
  await Product.updateOne({ _id: req.params.id }, { title }).exec();
  // can give this a promise to move it to async

  res.send("OK!");
});

// delete: to delete an item in the db
// has to be async since need to first wait until db finished deleting record
// for async:
// 1. add async before (req, res)
// 2. add .exec() after the deleteOne
// 3. add await before the deleteOne
app.delete("/products/:id", async (req, res) => {
  console.log("id to delete: ", req.params.id);

  /*
  alternative version:

  const productIndex = products.findIndex(
    (product) => product.id === +productId
  );
 */
  await Product.deleteOne({ _id: req.params.id }).exec();

  res.send("ok!");
});

const PORT = 8000;

//  listen for any requests that come in on port PORT (8000)

app.listen(PORT, () => {
  const db = mongoose.connection;
  db.on("error", console.error.bind(console, "connection error:"));
  db.once("open", function () {
    // we're connected!
  });
  //  res.setHeader("Access-Control-Allow-Origin", "http://localhost:8000");
  console.log(`CORS-enabled web server listening on port ${PORT}`);
});

// running ipconfig in terminal to find local IP address:
// gave:
// IPv4 Address. . . . . . . . . . . : 192.168.43.81

// installed express using: npm install express
// and called: npm init
// to create package.json file.

// created json  database of products for shop in: products.json

// run server using: node server.js

// access server's webpage by this address in the browser:
// http://192.168.43.81:8000/
// This shows "Hello world" on the webpage

// see the shuki page here:
// http://192.168.43.81:8000/shuki

/*
elad's example:

const express = require("express");
const bodyParser = require("body-parser");

const app = express();

app.use(bodyParser.json());

let todos = [
  { id: 1, title: "Wash the car" },
  { id: 2, title: "Throw the garbage" },
  { id: 3, title: "Wash the dishes" },
  { id: 4, title: "Empty the garbage" },
];

app.get("/todos", (req, res) => {
  const { q } = req.query;
  if (q) {
    res.send(todos.filter((todo) => todo.title.includes(q)));
  } else {
    res.send(todos);
  }
});

app.get("/todos/:todoId", (req, res) => {
  const { todoId } = req.params;
  const todo = todos.find((todo) => todo.id === +todoId);
  res.send(todo ?? {});
});

app.post("/todos", (req, res) => {
  const { title } = req.body;
  todos.push({ id: todos.length + 1, title });

  res.send("OK!");
});

app.put("/todos/:todoId", (req, res) => {
  const { todoId } = req.params;
  const { title } = req.body;
  const todo = todos.find((todo) => todo.id === +todoId);
  todo.title = title;

  res.send("OK!");
});

app.delete("/todos/:todoId", (req, res) => {
  const { todoId } = req.params;
  const todoIndex = todos.findIndex((todo) => todo.id === +todoId);
  todos.splice(todoIndex, 1);

  res.send("OK!");
});

app.listen(8000, () => {
  console.log("Example app listening on port 8000!");
});

*/
