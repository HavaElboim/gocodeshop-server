// import the express package, installed earlier using: npm install express
const express = require("express");
// import middleware to accept post requests:
const bodyParser = require("body-parser");

// call the express function which returns an express server application
const app = express();
// use the body-parser addition:
app.use(bodyParser.json());

// add mongoose to communicate with mongoDB
// - see https://mongoosejs.com/docs/index.html
const mongoose = require("mongoose");
mongoose.connect("mongodb://localhost/gocodeshop", {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

var cors = require("cors");
app.use(cors());

// provide data to be displayed on the / page of the server's website
app.get("/", (req, res) => {
  res.send("Hello world");
});

// provide data to be displayed on the /shuki page of the server's website
// remove file public/products.json
// otherwise the MongoDB will not work - it will complain that
// "Cannot overwrite Product model once compiled"
/*
app.get("/products", (req, res) => {
  res.send(products);
});
*/

//adding option to serve queries:
// client will access a product containing a keyword using:
// https://localhost:8000?q=keyword
/*
app.get("/search", (req, res) => {
  console.log("received query for product category: ", req.query.q);
  const { q } = req.query.q;
  if (q) {
    console.log("looking for ", q);
    res.send(
      products.filter(
        (product) =>
          product.category.includes(q) ||
          product.title.includes(q) ||
          product.description.includes(q)
      )
    );
  } else {
    console.log("can't find product, showing all products");
    res.send(products);
  }
});
*/

//adding option to serve requests with parameters:
// client will access a product with given productid using:
// https://localhost:8000/:idnum
app.get("/products/:id", async (req, res) => {
  console.log("received request for product id: ", req.params.id);
  //const productId = req.params.id;
  //console.log("productId is ", productId);
  // old version fetching from json or array of data objects:
  //const product = products.find((product) => product.id === +productId); // use + to change productId from string to number
  //console.log("found product: ", product);
  // old version
  //res.send(product ?? {});

  // using MongoDB and Mongoose:
  // define which collection from the db:
  // with Mongo, get the relevant product directly with the product id:
  // by default, findById looks in the db for id generated by the db, i.e.
  // _id (and not id)
  // - inspect the db by MongoDB Compass to see the id for each record
  const product = await Product.findById(productId).exec();
  const { q } = req.query;
  if (q) {
    res.send(products.filter((product) => product.title.includes(q)));
  } else {
    res.send(products);
  }
});
// set a port number to be used for the server

// post: to add an item to the database
// - must define Schema for documents (records) in the database
app.post("/products", (req, res) => {
  const productSchema = new mongoose.Schema({
    //title: { type: String, required: true },
    title: String,
    price: Number,
    description: String,
    // slug is a user-friendly and user-defined version of the product id
    // since the id generated by the server is a long and complex number
    slug: { type: String, unique: true },
  });
  // if have defined slug for each product, search by slug instead of by id:
  // app.get("products/:slug") etc

  // define "Product" as collection,
  // then Mongoose will go to "Products" (with `s` at the end)
  // during app.get later on in the code
  const Product = mongoose.model("Product", productSchema);
  //new Product({ title, price, description }).save();

  console.log(req.body);
  // for old version using json or saving products in array of objects:
  //const { title } = req.body; // title of the new product will be sent in the body of the post request
  //products = [...products, { id: products.length + 1, title }];
  res.send("OK");
});

// put : to change a value of an item in the database
// define the put as an async function
app.put("/products/:id", async (req, res) => {
  const { productId } = req.params; // pass the id of the product you want to change in the params of the put request
  const { title } = req.body; // pass the new title in the body of the put request
  // const product = products.find((product) => product.id === +productId);
  // product.title = title; // here have changed the title of the product in the database
  //res.send("ok!");

  // identify the project by the id generated by the server, which has the
  // key _id
  await Product.updateOne({ _id: productId }, { title }).exec();
  // can give this a promise to move it to async
});

// delete: to delete an item in the db
// has to be async since need to first wait until db finished deleting record
// for async:
// 1. add async before (req, res)
// 2. add .exec() after the deleteOne
// 3. add await before the deleteOne
app.delete("products/:id", async (req, res) => {
  const { productId } = req.params;
  // use splice, providing index in the array and how many items, to remove items from an array
  /*const productIndex = products.findIndex(
    (product) => product.id === +productId
  );
  products.splice(productIndex, 1);*/

  await Product.deleteOne({ _id: productId }).exec();
  res.send("ok!");
});

const PORT = 8000;

//  listen for any requests that come in on port PORT (8000)

app.listen(PORT, () => {
  const db = mongoose.connection;
  db.on("error", console.error.bind(console, "connection error:"));
  db.once("open", function () {
    // we're connected!
  });
  //  res.setHeader("Access-Control-Allow-Origin", "http://localhost:8000");
  console.log(`CORS-enabled web server listening on port ${PORT}`);
});

// running ipconfig in terminal to find local IP address:
// gave:
// IPv4 Address. . . . . . . . . . . : 192.168.43.81

// installed express using: npm install express
// and called: npm init
// to create package.json file.

// created json  database of products for shop in: products.json

// run server using: node server.js

// access server's webpage by this address in the browser:
// http://192.168.43.81:8000/
// This shows "Hello world" on the webpage

// see the shuki page here:
// http://192.168.43.81:8000/shuki
